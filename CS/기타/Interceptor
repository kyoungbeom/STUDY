Interceptor(인터셉터)는 스프링 MVC에서 요청(Request)과 응답(Response)의 흐름을 가로채어 전처리 및 후처리를 할 수 있는 기능. 
필터(Filter)와 유사하지만, 더 구체적으로 컨트롤러에 대한 접근 전후를 제어하는 데 특화. 
이를 통해 인증, 권한 체크, 로깅, 공통 작업 처리 등을 구현할 수 있음.

1. Interceptor의 주요 특징
전처리(Pre-Processing)와 후처리(Post-Processing)가 가능함.
특정 URL 패턴에 대해 요청을 가로채서 작업할 수 있음.
컨트롤러에 진입하기 전, 뷰가 렌더링되기 전, 완전히 응답을 반환한 후 등 다양한 시점에서 작업 가능.
스프링의 HandlerInterceptor 인터페이스를 구현하여 사용할 수 있음.

2. Interceptor 동작 과정
Interceptor는 크게 세 가지 메서드를 제공하며, 각 메서드는 특정 시점에 호출.

1. preHandle()
컨트롤러에 요청이 전달되기 전에 호출되는 메서드.
요청을 처리할지 말지 결정할 수 있음. true를 반환하면 다음 단계로 진행되고, false를 반환하면 요청 처리를 중단함.
주로 인증, 권한 체크, 로깅 등의 작업을 처리함.

public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
    System.out.println("Pre-handle: Before controller execution");
    return true;  // true면 다음으로 진행, false면 요청 중단
}

2. postHandle()
컨트롤러가 요청을 처리한 후, 뷰가 렌더링되기 전에 호출되는 메서드.
컨트롤러에서 반환된 모델 데이터를 가공하거나, 요청에 대한 추가 처리를 할 수 있음.

public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
    System.out.println("Post-handle: After controller execution but before view rendering");
}

3. afterCompletion()
뷰가 렌더링된 후, 즉 완전히 요청이 끝난 후 호출되는 메서드.
요청 처리의 완료 시점에 호출되며, 예외 처리나 리소스 정리 등의 작업을 수행할 수 있음.

public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
    System.out.println("After completion: After the view is rendered and the response is complete");
}

3. Interceptor 구현 예시
스프링에서 인터셉터를 사용하려면 HandlerInterceptor 인터페이스를 구현한 클래스를 정의한 후, 이를 WebMvcConfigurer에 등록해야 합니다.

1. 인터셉터 구현
public class MyInterceptor implements HandlerInterceptor {

    @Override
    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {
        System.out.println("Pre-handle: 요청 처리 전");
        return true;  // true: 요청 진행, false: 요청 중단
    }

    @Override
    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {
        System.out.println("Post-handle: 요청 처리 후, 뷰 렌더링 전");
    }

    @Override
    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {
        System.out.println("After completion: 뷰 렌더링 후");
    }
}

2. WebMvcConfigurer에서 인터셉터 등록
@Configuration
public class WebConfig implements WebMvcConfigurer {

    @Override
    public void addInterceptors(InterceptorRegistry registry) {
        registry.addInterceptor(new MyInterceptor())
                .addPathPatterns("/**")  // 모든 경로에 대해 인터셉터 적용
                .excludePathPatterns("/login", "/error");  // 특정 경로 제외 가능
    }
}
