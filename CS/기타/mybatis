MyBatis는 자바 기반의 퍼시스턴스 프레임워크로, SQL 쿼리를 직접 작성하여 데이터베이스와 상호작용할 수 있게 해주는 ORM(Object Relational Mapping) 프레임워크. 
JDBC와 달리, SQL 쿼리를 XML 파일이나 어노테이션으로 관리하면서, 더 간결하고 쉽게 데이터베이스 작업을 수행할 수 있도록 도와줌. 
MyBatis는 복잡한 SQL 작업을 쉽게 처리할 수 있으며, 매핑 작업에서 많은 유연성을 제공함.

1. MyBatis의 주요 특징
SQL 직접 제어
- MyBatis는 SQL 쿼리를 직접 작성하여 데이터베이스와 상호작용. 이로 인해 복잡한 쿼리나 다중 테이블 조인 등 SQL의 자유도를 높게 유지할 수 있음.

XML 또는 어노테이션 기반 매핑
- SQL을 XML 파일이나 어노테이션을 사용하여 매핑할 수 있으며, XML을 주로 사용하여 명시적으로 SQL과 자바 객체를 연결.

SQL과 자바 객체의 매핑
- 데이터베이스의 ResultSet을 자바 객체로 자동으로 매핑해주는 기능을 제공하여, 객체와 SQL의 결과를 쉽게 연결.

동적 SQL 지원
- if, choose, when, foreach 등의 태그를 사용하여 동적으로 SQL을 생성할 수 있어, 복잡한 조건 쿼리도 처리 가능.

2. MyBatis의 장점
SQL 제어 가능
- Hibernate와 같은 완전한 ORM 프레임워크와는 달리, MyBatis는 개발자가 직접 SQL을 제어할 수 있어 고성능 쿼리나 복잡한 쿼리를 자유롭게 작성할 수 있음.

설정음.

1. MyBatis-Spring 연동 설정
xml
<bean id="sqlSessionFactory" class="org.mybatis.spring.SqlSessionFactoryBean">
    <property name="dataSource" ref="dataSource"/>
    <property name="mapperLocations" value="classpath*:mapper/*.xml"/>
</bean>

<bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
    <property name="basePackage" value="com.example.mapper"/>
</bean>

2. Spring에서 Mapper 사용
Spring에서 MyBatis Mapper 인터페이스를 빈으로 등록한 후, @Autowired를 통해 의존성을 주입받아 사용할 수 있음.

@Service
public class UserService {

    @Autowired
    private UserMapper userMapper;

    public User getUserById(int id) {
        return userMapper.getUserById(id);
    }
}
