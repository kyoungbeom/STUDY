1. 스프링 DI (Dependency Injection, 의존성 주입)

정의
스프링의 의존성 주입(DI)은 객체 간의 의존 관계를 스프링 컨테이너가 관리하여 객체를 생성하고 연결해주는 방식.
개발자가 직접 객체를 생성하지 않고, 스프링이 필요한 객체를 자동으로 주입해주기 때문에 결합도를 낮추고 유연한 설계를 가능하게 함.

DI의 장점
객체 간 결합도를 낮춰 확장성 및 테스트 용이성 증가.
스프링 컨테이너가 객체 생성을 관리하여 객체 생명 주기를 관리할 수 있음.

DI 방식
생성자 주입
객체를 생성할 때 의존성을 생성자에 전달하여 주입하는 방식.

@Component
public class MyService {
    private final MyRepository repository;

    @Autowired
    public MyService(MyRepository repository) {
        this.repository = repository;
    }
}

필드 주입
필드에 직접 @Autowired를 사용하여 의존성을 주입하는 방식. (비추천: 테스트나 유지보수에 불리)

@Component
public class MyService {
    @Autowired
    private MyRepository repository;
}

setter 주입
Setter 메서드를 통해 의존성을 주입하는 방식.(NullPointerException 발생가능)

@Component
public class MyService {
    private MyRepository repository;

    @Autowired
    public void setRepository(MyRepository repository) {
        this.repository = repository;
    }
}

2. 스프링 AOP (Aspect-Oriented Programming, 관점 지향 프로그래밍)

정의
AOP는 핵심 로직과 부가적인 관심사(로깅, 보안, 트랜잭션 관리 등)를 분리하여 관리할 수 있게 해주는 스프링의 기능. 
핵심 비즈니스 로직에 부가적인 기능을 쉽게 추가할 수 있으며, 코드의 중복을 제거하고 유지보수를 쉽게 해줌.

AOP 구성 요소
Aspect (애스펙트)
부가적인 기능을 모듈화한 것으로, 여러 핵심 비즈니스 로직에 적용할 수 있는 공통 기능을 제공하는 단위.

Advice (어드바이스)
애스펙트가 실제로 수행하는 작업(메서드 실행 전, 후, 예외 시 등 특정 시점에 동작).

Join Point (조인 포인트)
어드바이스가 실행될 수 있는 지점(메서드 호출, 예외 발생 등).

Pointcut (포인트컷)
어드바이스가 적용될 조인 포인트를 지정하는 표현식.

Weaving (위빙)
실제로 애스펙트가 핵심 로직 코드에 적용되는 과정.

@Aspect
@Component
public class LoggingAspect {
   
   @Before("execution(* com.example.service.*.*(..))")
   public void logBeforeMethod(JoinPoint joinPoint) {
       System.out.println("Method called: " + joinPoint.getSignature().getName());
   }

   @AfterReturning("execution(* com.example.service.*.*(..))")
   public void logAfterMethod(JoinPoint joinPoint) {
       System.out.println("Method executed: " + joinPoint.getSignature().getName());
   }
}
