MVC(Model-View-Controller)는 소프트웨어 설계에서 널리 사용되는 아키텍처 패턴으로, 
애플리케이션의 구조를 모델(Model), 뷰(View), **컨트롤러(Controller)**로 나누어 각각의 역할을 분리하는 방식. 
이러한 분리를 통해 코드의 유지보수성, 재사용성, 확장성을 높이고, 각 요소가 독립적으로 관리될 수 있음.

1. Model (모델)
역할: 애플리케이션의 데이터와 비즈니스 로직을 관리.
책임: 데이터를 저장하고 처리하는 부분을 담당하며, 데이터베이스와의 상호작용도 포함. 
모델은 데이터 상태를 표현하고, 이를 수정하거나 불러오는 로직을 구현.

예시: DAO(Data Access Object), 서비스 클래스, 비즈니스 로직.

public class User {
    private String name;
    private int age;

    // Getter/Setter
}

2. View (뷰)
역할: 사용자에게 화면을 제공하고, 데이터를 시각적으로 보여주는 부분.
책임: 컨트롤러가 전달한 모델 데이터를 받아 사용자에게 표시하는 역할. 사용자가 입력한 정보를 컨트롤러로 전달할 수도 있음.

예시: HTML, JSP, Thymeleaf, 프론트엔드 템플릿 엔진.

<!DOCTYPE html>
<html>
<head><title>User Info</title></head>
<body>
    <h1>User: ${user.name}</h1>
    <p>Age: ${user.age}</p>
</body>
</html>

3. Controller (컨트롤러)
역할: 사용자의 요청을 처리하고, 모델과 뷰를 연결해주는 중간 역할.
책임: 사용자의 입력을 받아서 이를 처리할 모델을 호출하고, 처리 결과를 뷰에 전달. 
즉, 사용자의 요청을 받고 어떤 로직을 실행할지 결정한 후, 데이터를 모델에 전달하여 처리하고, 처리 결과를 뷰로 반환.

예시: Spring MVC의 @Controller 클래스.

@Controller
public class UserController {

    @GetMapping("/user")
    public String getUser(Model model) {
        User user = new User();
        user.setName("Alice");
        user.setAge(25);

        model.addAttribute("user", user);  // 모델 데이터를 뷰에 전달
        return "userView";  // 뷰의 이름 (JSP, HTML 등)
    }
}
